#!/usr/bin/python3

import yaml
import os
from os.path import isfile
from time import strftime, gmtime

cwd = os.getcwd()
cross64 = "prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/bin"
cross32 = "prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/bin"
libfaketime = "/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1"
if 'BASE_DIR' in os.environ:
    base_dir = os.environ['BASE_DIR']
else:
    base_dir = "%s/base" % os.getcwd()

if 'CONFIG_FILE' in os.environ:
    config_file=os.environ['CONFIG_FILE']
elif os.path.isfile('./config.yml'):
    config_file="./config.yml"
with open(config_file, encoding='utf-8') as data_file:
    config = yaml.load(data_file.read())

environment = {
    "OS_NAME": config['name'],
    "BASE_DIR": base_dir,
    "ANDROID_HOME": "%s/sdk" % base_dir,
    "MANIFEST_REPO": "/opt/android/manifests",
    "MANIFEST_DIR": "%s/manifests" % cwd,
    "CONFIG_DIR": cwd,
    "EXTERNAL_DIR": "%s/external" % cwd,
    "DEVICES": ",".join(config['devices'].keys()),
    "BUILD_HOST": config['host'],
    "BUILD_USER": config['user'],
    "BUILD_TYPE": config['type'],
    "BUILD_VARIANT": config['variant'],
    "BUILD_NUMBER": strftime('%m%d%H%M', gmtime(config['datetime'])),
    "FAKETIME": strftime('%y-%m-%d %H:%M:%S', gmtime(config['datetime'])),
    "BUILD_DATETIME": config['datetime'],
    "KBUILD_BUILD_TIMESTAMP":
        strftime('%Y-%m-%dT%H:%M:%SZ', gmtime(config['datetime'])),
    "KBUILD_BUILD_USER": config['user'],
    "KBUILD_BUILD_HOST": config['host'],
    "KBUILD_BUILD_VERSION": \
        strftime('%m%d%H%M', gmtime(config['datetime'])),
    "KCONFIG_NOTIMESTAMP": 1,
    "CHROMIUM_VERSION": config['apps']['chromium']['version'],
    "CHROMIUM_SRC_REF": config['apps']['chromium']['src_ref'],
    "CHROMIUM_DEPOT_TOOLS_REF": config['apps']['chromium']['depot_tools_ref'],
    "LC_ALL":"C"
}
if 'DEVICE' in os.environ and len(os.environ['DEVICE']) > 0:
    device=environment['DEVICE']=os.environ['DEVICE']
    variant=environment['BUILD_VARIANT']
    build_number=environment['BUILD_NUMBER']
    device_config=config['devices'][device]['global']
    for key, value in device_config.items():
        environment[key.upper()]=value.lower()
    if variant == "user":
        key_dir = "%s/keys/%s" % (os.getcwd(),device)
    else:
        key_dir = "%s/build/target/product/security/" % base_dir
    environment["KEY_DIR"] = key_dir
    environment["RELEASE_DIR"] = \
            "%s/release/%s/%s" % (os.getcwd(), device, build_number)
    environment['BUILD_ID'] = device_config['factory_build']

environment['ARCH'] = "arm64"
environment['LANG'] = "C"
environment['CONFIG_COMPAT_VDSO'] = "n"
environment['CROSS_COMPILE'] = \
    '{}/{}/aarch64-linux-android-'.format(base_dir, cross64)
environment['CROSS_COMPILE_ARM32'] = \
    '{}/{}/arm-linux-androideabi-'.format(base_dir, cross32)

paths = [
    '.repo/repo/',
    'prebuilts/jdk/jdk8/linux-x86/bin',
    'build/tools/releasetools',
    'development/tools',
    'external/avb',
    'out/host/linux-x86/bin',
    cross32,
    cross64,
]

envsetup = '{}/build/envsetup.sh'.format(base_dir)
if isfile(envsetup):
    print('source {}'.format(envsetup))
for path in paths:
    print('export PATH="/home/build/scripts:{}/{}:$PATH"'.format(
        environment['BASE_DIR'], path
    ))
for name, value in environment.items():
    print('export {}="{}"'.format(name, value))
